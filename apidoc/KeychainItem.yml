name: Modules.Identity.KeychainItem
summary: Represents a keychain item to communicate with the native iOS Keychain and Android Keystore.
platforms: [iphone, ipad, android]
since: {iphone: "6.1.0", ipad: "6.1.0", android: "6.1.0"}
extends: Titanium.Module
description: |
    The following example demonstrates the basic usage to save, read and delete
    values with the native iOS Keychain and/or Android Keystore:

    ``` javascript
    var Identity = require('ti.identity');

    // Create a keychain item
    var keychainItem = Identity.createKeychainItem({
        identifier: 'password'
    });

    // Triggered when the keychain item was successfully saved
    keychainItem.addEventListener('save', function(e) {
        // Notify the user that the operation succeeded or failed
    });

    // Write to the keychain
    keychainItem.save('s3cr3t_p4$$w0rd');
    ```

    For advanced security options, you can specify accessibility mode to the keychain
    that will be applied when writing items to the keychain, for example:

    ``` javascript
    var Identity = require('ti.identity');

    // Create a keychain item
    var keychainItem = Identity.createKeychainItem({
      identifier: 'mypassword',
      service: 'my_service', // iOS only. Defaults to 'ti.touchid' for backwards compatibility
      accessGroup: '<YOUR-TEAM-ID>.com.appc.identitytest',
      accessibilityMode: Identity.ACCESSIBLE_WHEN_PASSCODE_SET_THIS_DEVICE_ONLY,
      accessControlMode: Identity.ACCESS_CONTROL_TOUCH_ID_ANY,
      // Pass more native options to the keychain. Since there are hundrets of them,
      // look up the value of the constant and pass it here. Example:
        options: {
          // The value of kSecUseOperationPrompt
          'u_OpPrompt': 'Please authenticate yourself!'
      }
    });
    ```
methods:
  - name: save
    summary: Saves a new value to the native keychain.
    description: |
        The <Modules.Identity.KeychainItem.save> event is triggered when
        a new item is saved. If an error occurs, the `error` key informs you
        about the exact error.

        On Android this will also overwrite any existing value.
    parameters:
      - name: value
        summary: The value to be stored in the native keychain.
        type: String
    since: "6.1.0"

  - name: read
    description: |
        The <Modules.Identity.KeychainItem.read> event is triggered when
        an item is fetched. If an error occurs, the `error` key informs you
        about the exact error.
    summary: Reads an existing value to the native keychain.
    since: "6.1.0"

  - name: update
    summary: Updates an existing value to the native keychain.
    description: |
        The <Modules.Identity.KeychainItem.update> event is triggered when
        an item is updated. If an error occurs, the `error` key informs you
        about the exact error.
    parameters:
      - name: value
        summary: The value to be stored in the native keychain.
        type: String
    since: "6.1.0"

  - name: reset
    summary: Resets an existing value from the native keychain.
    description: |
        The <Modules.Identity.KeychainItem.reset> event is triggered when
        a new item is saved. If an error occurs, the `error` key informs you
        about the exact error.
    since: "6.1.0"

  - name: fetchExistence
    summary: |
        Asynchronously determines whether or not a value of the specified identifier
        exists in the keychain item.
    parameters:
      - name: result
        summary: |
            Use the event key `exists` of the callback to determine the
            existence of the keychain item.
        type: Callback
    since: "6.1.0"

events:
  - name: save
    summary: Triggered when a new keychain item is saved (or an error occurred).
    since: "6.1.0"
  - name: update
    summary: Triggered when a new keychain item is updated (or an error occurred).
    since: "6.1.0"
  - name: read
    summary: Triggered when a new keychain item is read (or an error occurred).
    since: "6.1.0"
  - name: reset
    summary: Triggered when a new keychain item is reset (or an error occurred).
    since: "6.1.0"

---
name: KeychainItemType
platforms: [iphone, ipad, android]
since: "6.1.0"
summary: Dictionary passed to the `createKeychainItem` method.
properties:
    - name: identifier
      platforms: [iphone, ipad, android]
      optional: false
      summary: |
          Required identifier to create or receive a keychain item. The identifier
          cannot contain alphanumeric characters or it might be rejected by the keychain.
      type: String
      
    - name: service
      platforms: [iphone, ipad]
      optional: false
      summary: |
          A key whose value is a string indicating the item's service. Defaults
          to `ti.touchid` if not set for backwards compatibility with the deprecated
          Ti.TouchID module. This property is required when using app extensions
          and should also include the app-prefix (aka team-ID).
      type: String

    - name: accessGroup
      platforms: [iphone, ipad]
      summary: |
          Optional identifier used to define the access group the keychain item
          should be valid. This can be used to share a keychain item across two
          or more apps that use the same organization group identifier.
          More information about keychain access groups can be found in the
          [official iOS documentation](https://developer.apple.com/reference/security/ksecattraccessgroup).
      type: String

    - name: accessibilityMode
      platforms: [iphone, ipad, android]
      summary: |
          Optional constant used for determining when a keychain item should be
          readable. Use this property with caution to enable advanced access control.
          More information about this property and it's values can be found in the
          [official iOS documentation](https://developer.apple.com/reference/security/1658642-keychain_services/1663541-keychain_item_accessibility_cons).
      type: Number
      constants: Modules.Identity.ACCESSIBLE_*

    - name: accessControlMode
      platforms: [iphone, ipad, android]
      summary: |
          Optional constants used to determine the access control with the specified
          protection type and flags. The constants can be concatenated by using the
          Bit OR operator, e.g. `optionA | optionB | optionC`.
      type: Number
      constants: Modules.Identity.ACCESS_CONTROL_*

    - name: cipher
      platforms: [android]
      summary: |
          Define the cipher used to encrypt keychain items.
          [Android supported ciphers](https://developer.android.com/training/articles/keystore.html#SupportedCiphers)
      default: AES/CBC/PKCS7Padding
      type: String

    - name: options
      platforms: [iphone, ipad]
      summary: |
          Optional parameter used to specify additional values to the keychain.
          Example: The raw-value of `kSecUseOperationPrompt` is `u_OpPrompt`, so
          you could specify `options: {'u_OpPrompt': 'Please authenticate yourself!'}`.
      type: Dictionary
